{"version":3,"sources":["_mixins.scss","_general.scss","_variables.scss","blocks/_header.scss"],"names":[],"mappings":"AA6oBA;AAgbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC7jCA;AAAA;AAAA;EAGI;;;AAGJ;EACI;EACA,kBCPI;;;ADUR;EACI;EACA;;;AAGJ;AAAA;AAAA;AAAA;EAII;;;AAGJ;EACI;EACA;EACA;;;AAGJ;EACI;EACA;EACA;EACA;;;AAGJ;EACI;;;AErCJ;EACI;;AAEA;EACI;EACA;EACA;EACA;EACA;EACA,ODTA;;ACcA;EACI;EACA;;AAIA;EACI;EACA;;AAGJ;EACI;EACA;;AAGJ;EACI;EACA;;;AAMhB;EACI;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;;AHghBA;EGzhBJ;IAYQ;IACA;IACA;IACA;IACA;IACA;;;;AAIR;EACI;EACA;EACA;EACA;EACA;;AH+fA;EGpgBJ;IAQQ;;;;AAKR;EACI;EACA;;AHqfA;EGvfJ;IAKQ;IACA;;;;AAIR;EACI;EACA;EACA;;AH0eA;EG7eJ;IAMQ;;;;AAIR;EACI,OD7FI;EC8FJ;EACA;;AHgeA;EGneJ;IAMQ;;;;AAIR;EACI;EACA;EACA;;;AAGJ;EACI;;AHkdA;EGndJ;IAIQ;;;;AAIR;EACI,kBDpHI;ECqHJ;EACA;EACA;EACA;EACA;;AHqcA;EG3cJ;IASQ;;;AAGJ;AAAA;EAGI;EACA;EACA;EACA;EACA;EACA;EACA,kBDzIA;EC0IA;;AAGJ;EACI;;AAGJ;EACI;;AAGJ;EACI;EACA","file":"main.css","sourcesContent":["@charset 'UTF-8';\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.1\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\n  ) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: (\n  'screen',\n  'portrait',\n  'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  }\n\n  @else {\n    @warn $message;\n    $_: noop(\n  );\n}\n\n@return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix =='max' and $value <=$no-media-breakpoint-value) or ($prefix =='min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    }\n\n    @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\n  $_: log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension)>0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  }\n\n  @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\n    $_: log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator =='>' {\n    $value: $value +$interval;\n  }\n\n  @else if $operator =='<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start >$end {\n    @return ();\n  }\n\n  $result: (\n  );\n\n@for $i from $start through $end {\n  $result: append($result, nth($list, $i));\n}\n\n@return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value)=='number' {\n    @return $value;\n  }\n\n  @else if type-of($value) !='string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n\n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1)=='-';\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9\n  );\n\n@for $i from if($minus, 2, 1) through str-length($value) {\n  $character: str-slice($value, $i, $i);\n\n  @if not (index(map-keys($numbers), $character) or $character =='.') {\n    @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n  }\n\n  @if $character =='.' {\n    $digits: 1;\n  }\n\n  @else if $digits ==0 {\n    $result: $result * 10+map-get($numbers, $character);\n  }\n\n  @else {\n    $digits: $digits * 10;\n    $result: $result +map-get($numbers, $character) / $digits;\n  }\n}\n\n@return if($minus, -$result, $result);\n;\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints  !global;\n  $media-expressions: $tweak-media-expressions  !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  }\n\n  @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n\n\n// vertical align el inside parent with fixed height/min-height\n// usage\n// html - .parent>.child\n// scss - @include v-align;\n//     or @include v-align(250px);\n//     or @include v-align(250px, bottom, before);\n//\n@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {\n  white-space: nowrap;\n  text-align: center;\n\n  &:#{$va-pseudo} {\n    content: '';\n    display: inline-block;\n    vertical-align: $va-direction;\n    width: 0;\n    min-height: $va-height;\n  }\n\n  >* {\n    white-space: normal;\n    display: inline-block;\n    vertical-align: $va-direction;\n    max-width: 100%;\n  }\n}\n\n// vertical align a pair of child el inside parent\n// usage\n// html - .post>.image+.text\n// scss - @include v-align-pair(image, text);\n//     or @include v-align-pair(image, text, bottom);\n//     or @include v-align-pair(image, text, middle, 200px);\n//\n@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto) {\n  display: table;\n\n  .#{$child-name1} {\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width1;\n  }\n\n  .#{$child-name2} {\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width2;\n  }\n}\n\n\n// vertical align el\n// usage: @include vertical-align-el;\n//\n@mixin vertical-align-el {\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n@mixin middle() {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n\n/* mixin usage */\n// .linear-gradient {\n// @include linear-gradient(#00FFFF,#0080FF,45deg);\n// }\n\n@mixin linear-gradient($color-one, $color-two, $degrees) {\n  background: -moz-linear-gradient($degrees, $color-one 0%, $color-two 100%);\n  /* ff3.6+ */\n  background: -webkit-gradient(linear, left top, right top, color-stop(0%, $color-one), color-stop(100%, $color-two));\n  /* safari4+,chrome */\n  background: -webkit-linear-gradient($degrees, $color-one 0%, $color-two 100%);\n  /* safari5.1+,chrome10+ */\n  background: -o-linear-gradient($degrees, $color-one 0%, $color-two 100%);\n  /* opera 11.10+ */\n  background: -ms-linear-gradient($degrees, $color-one 0%, $color-two 100%);\n  /* ie10+ */\n  background: linear-gradient($degrees, $color-one 0%, $color-two 100%);\n  /* w3c */\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color-one', endColorstr='$color-two', GradientType=1);\n  /* ie6-9 */\n}\n\n//\n// @include rotate(rl);\n//\n\n@mixin rotate($direction: rl) {\n  @if $direction ==rl {\n    writing-mode: sideways-rl;\n    -ms-writing-mode: tb-rl;\n    -webkit-writing-mode: vertical-rl;\n  }\n\n  @else {\n    writing-mode: sideways-lr;\n    -ms-writing-mode: tb-lr;\n    -webkit-writing-mode: vertical-lr;\n  }\n}\n\n/// Mixin helping defining both `width` and `height` simultaneously.\n///\n/// @author Hugo Giraudel\n///\n/// @access public\n///\n/// @param {Length} $width - Element’s `width`\n/// @param {Length} $height ($width) - Element’s `height`\n///\n/// @example scss - Usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///     @include size(100%, 10em);\n///   }\n///\n/// @example css - CSS output\n///   .foo {\n///     width: 10em;\n///     height: 10em;\n///   }\n///\n///   .bar {\n///     width: 100%;\n///     height: 10em;\n///   }\n///\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// font-smothing\n/// @include font-smoothing(on);\n/// @include font-smoothing(off);\n@mixin font-smoothing($value: on) {\n  @if $value ==on {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  @else {\n    -webkit-font-smoothing: subpixel-antialiased;\n    -moz-osx-font-smoothing: auto;\n  }\n}\n\n\n/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n///\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\n///\n/// @example scss - Usage\n///   .element {\n///     @include hide-text;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     overflow: hidden;\n///     text-indent: 101%;\n///     white-space: nowrap;\n///   }\n///\n@mixin hide-text {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}\n\n\n/// Creates a visual triangle.\n/// Mixin takes ($size, $color, $direction)\n/// The $size argument can take one or two values—width height.\n/// The $color argument can take one or two\n/// values—foreground-color background-color.\n///\n/// @author http://bourbon.io/docs/#triangle\n///\n/// $direction:\n/// up, down, left, right, up-right, up-left, down-right, down-left\n/// @example scss - Usage\n///   @include triangle(12px, gray, down);\n///   @include triangle(12px 6px, gray blue, up-left);\n///\n@mixin triangle($size, $color, $direction) {\n  $width: nth($size, 1);\n  $height: nth($size, length($size));\n  $foreground-color: nth($color, 1);\n  $background-color: if(length($color)==2, nth($color, 2), transparent);\n  height: 0;\n  width: 0;\n\n  @if ($direction ==up) or ($direction ==down) or ($direction ==right) or ($direction ==left) {\n    $width: $width / 2;\n    $height: if(length($size) > 1, $height, $height/2);\n\n    @if $direction ==up {\n      border-bottom: $height solid $foreground-color;\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n    }\n\n    @else if $direction ==right {\n      border-bottom: $width solid $background-color;\n      border-left: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    }\n\n    @else if $direction ==down {\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n      border-top: $height solid $foreground-color;\n    }\n\n    @else if $direction ==left {\n      border-bottom: $width solid $background-color;\n      border-right: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    }\n  }\n\n  @else if ($direction ==up-right) or ($direction ==up-left) {\n    border-top: $height solid $foreground-color;\n\n    @if $direction ==up-right {\n      border-left: $width solid $background-color;\n    }\n\n    @else if $direction ==up-left {\n      border-right: $width solid $background-color;\n    }\n  }\n\n  @else if ($direction ==down-right) or ($direction ==down-left) {\n    border-bottom: $height solid $foreground-color;\n\n    @if $direction ==down-right {\n      border-left: $width solid $background-color;\n    }\n\n    @else if $direction ==down-left {\n      border-right: $width solid $background-color;\n    }\n  }\n\n  @else if ($direction ==inset-up) {\n    border-color: $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $height $width;\n  }\n\n  @else if ($direction ==inset-down) {\n    border-color: $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $height $width;\n  }\n\n  @else if ($direction ==inset-right) {\n    border-color: $background-color $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $width $height;\n  }\n\n  @else if ($direction ==inset-left) {\n    border-color: $background-color $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $width $height;\n  }\n}\n\n\n/// Animate css properties\n// usage\n// scss - @include animate(color);\n//     or @include animate(color width);\n//     or @include animate(color width, 1s, linear);\n//\n$animation-speed: .3s !default;\n\n@mixin animate($properties, $duration: $animation-speed, $easing: ease) {\n  $list: ();\n\n  @each $prop in $properties {\n    $str: #{$prop} #{$duration} #{$easing};\n    $list: join($list, #{$str}, comma);\n  }\n\n  transition: $list;\n}\n\n\n/// Mixin for styling form-placeholders\n/// @example scss - Usage\n///   @include placeholder {\n///    color: #333;\n///   }\n///\n///   input[type='text'],\n///   input[type='tel'],\n///   input[type='email'] {\n///     @include placeholder {\n///      color: red;\n///     }\n///   }\n\n@mixin placeholder {\n  &::-webkit-input-placeholder {\n    @content\n  }\n\n  &::-moz-placeholder {\n    opacity: 1;\n    @content\n  }\n\n  &:-moz-placeholder {\n    @content\n  }\n\n  &:-ms-input-placeholder {\n    @content\n  }\n\n  &.placeholder {\n    @content\n  }\n}\n\n/// Font-size px to rem calc\n/// @example scss - Usage\n/// selector {\n///    @include rem-font-size(16px);\n/// }\n\n@mixin rem-font-size($pxSize) {\n  font-size: $pxSize;\n  font-size: ($pxSize / 10px) + rem;\n}\n\n//\n// @include inline-grid(top);\n//\n\n@mixin inline-grid($valign: middle) {\n  @extend %listreset;\n\n  font-size: 0;\n\n  >li {\n    display: inline-block;\n    vertical-align: $valign;\n    font-size: 14px;\n  }\n}\n\n//\n// @include float-grid(33.332%, 20px);\n//\n\n@mixin float-grid($width: 50%, $space: 0) {\n  @extend %clearfix;\n\n  .col {\n    float: left;\n    width: calc($width - $space * 2);\n    margin: 0 $space;\n  }\n}\n\n//\n// @include swap-order(float);\n// @include swap-order(flex);\n//\n\n@mixin swap-order($prop: 'flex') {\n  @if $prop =='float' {\n    @extend %clearfix;\n\n    >.swap {\n      float: left;\n    }\n  }\n\n  @else {\n    display: flex;\n    flex-wrap: wrap;\n\n    >.swap {\n      order: 1;\n    }\n  }\n}\n\n//\n// @include stretch-blocks(50%, middle);\n//\n\n@mixin stretch-blocks($width: 50%, $valign: top) {\n  display: table;\n  table-layout: fixed;\n\n  .stretch-wrap {\n    display: table-row;\n  }\n\n  .stretch-col {\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width;\n  }\n}\n\n//\n// @include multiline-ellipsis(1.2, 2, black);\n//\n\n@mixin multiline-ellipsis($lineh: 1.2em, $lines: 3, $bg: white) {\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: justify;\n  margin-right: -1em;\n  padding-right: 1em;\n  line-height: $lineh;\n  max-height: $lineh * $lines;\n\n  &:before {\n    content: '...';\n    position: absolute;\n    right: 0;\n    bottom: 0;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    right: 0;\n    width: 1em;\n    height: 1em;\n    margin-top: .2em;\n    background: $bg;\n  }\n}\n\n//\n// @include attr(href);\n//\n\n@mixin attr($attr) {\n  content: attr($attr);\n}\n\n//\n// @include counter(list, section);\n//\n\n@mixin counter($children, $name, $txt) {\n  @extend %listreset;\n\n  counter-reset: $name;\n\n  .#{$children} {\n    position: relative;\n\n    &:before {\n      counter-increment: $name;\n      content: counter($name) $txt;\n    }\n  }\n}\n\n//\n// @include calc(height, 100px, vh);\n//\n\n@mixin calc($property: width, $size: 0, $val: '%') {\n  $property: calc(100 + $val - $size);\n}\n\n//\n//@include pseudo();\n//\n\n@mixin pseudo($content: '', $pos: absolute, $display: block) {\n  content: '#{$content}';\n  display: $display;\n  position: $pos;\n}\n\n/*--------------------------------\n\tResponsive ratio\n\tUsed for creating scalable elements that maintain the same ratio\n\texample:\n\t.element {\n\t\t@include responsive-ratio(400, 300);\n\t}\n*/\n\n@mixin responsive-ratio($x, $y, $pseudo: false) {\n  $padding: unquote(($y / $x ) * 100 + '%');\n\n  @if $pseudo {\n    &:before {\n      @include pseudo($pos: relative);\n\n      width: 100%;\n      padding-top: $padding;\n    }\n  }\n\n  @else {\n    padding-top: $padding;\n  }\n}\n\n//\n// @include cubic(.1, .7, 1.0, .1)\n//\n\n@mixin cubic($x: .3, $y: .6, $a: .3, $b: .3) {\n  transition-timing-function: cubic-bezier($x, $y, $a, $b);\n}\n\n@mixin unselectable {\n  -webkit-touch-callout: none;\n  user-select: none;\n}\n\n@mixin selection {\n  ::-moz-selection {\n    @content;\n  }\n\n  ::selection {\n    @content;\n  }\n}\n\n@mixin hardware($backface: true, $perspective: 1000) {\n\n  @if $backface {\n    backface-visibility: hidden;\n  }\n\n  perspective: $perspective;\n}\n\n@mixin appearance($val: none) {\n  -webkit-appearance: $val;\n  -moz-appearance: $val;\n  appearance: $val;\n}\n\n//\n//@include icomoon(/0900);\n//\n\n@mixin icomoon($content: false) {\n  @if $content {\n    content: '#{$content}';\n  }\n\n  display: block;\n  font-family: \"icomoon\" !important;\n  font-style: normal !important;\n  font-weight: normal !important;\n  font-variant: normal !important;\n  text-transform: none !important;\n  speak: none;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n//\n// @include z-i(absolute, 9999);\n//\n\n@mixin z-i($pos: relative, $count: 999) {\n  position: $pos;\n  z-index: $count;\n}\n\n// div {\n//    @include absolute(100px, 100px, auto, auto);\n// }\n\n@mixin absolute($top: 0, $right: 0, $bottom: 0, $left: 0) {\n  position: absolute;\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n}\n\n//\n// @include flex(center, justify-content);\n//\n\n@mixin flex($align: center, $justify: center) {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: $align;\n  justify-content: $justify;\n}\n\n//\n// @include bg(contain);\n//\n\n@mixin bg($size: cover, $pos: 50% 50%) {\n  background-repeat: no-repeat;\n  background-position: $pos;\n  background-size: $size;\n}\n\n//\n//include AFS(20px, 5, 480, 768);\n//\n\n// font-size: calc([minimum size] + ([maximum size] - [minimum size]) *\n// ((100vw - [minimum viewport width]) / ([maximum viewport width] - [minimum viewport width])));\n\n\n//\n// @include column(3);\n//\n\n@mixin column($count: 2, $gap: 20px) {\n  column-count: $count;\n  column-gap: $gap;\n}\n\n// @include keyframes(slide-down) {\n//   0% { opacity: 1; }\n//   90% { opacity: 0; }\n// }\n\n// .element {\n//   width: 100px;\n//   height: 100px;\n//   background: black;\n//   @include animation('slide-down 5s 3');\n// }\n\n@mixin keyframes($animation-name) {\n  @-webkit-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-moz-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-ms-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-o-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @keyframes #{$animation-name} {\n    @content;\n  }\n}\n\n@mixin animation($str) {\n  -webkit-animation: #{$str};\n  -moz-animation: #{$str};\n  -ms-animation: #{$str};\n  -o-animation: #{$str};\n  animation: #{$str};\n}\n\n// @each $name in 'save' 'cancel' 'help' {\n//     .icon-#{$name} {\n// background-image: url('/images/#{$name}.png');\n//     }\n// }\n\n// .icon-save {\n//   background-image: url(\"/images/save.png\");\n// }\n// .icon-cancel {\n//   background-image: url(\"/images/cancel.png\");\n// }\n// .icon-help {\n//   background-image: url(\"/images/help.png\");\n// }\n\n// @include icon-colors('icon-',\n//     'save'   green,\n//     'cancel' gray,\n//     'delete' red\n// );\n\n@mixin icon-colors($prefix, $colors...) {\n  @each $i in $colors {\n    .#{$prefix}#{nth($i, 1)} {\n      color: nth($i, 2);\n    }\n  }\n}\n\n// .icon-save {\n//   color: green;\n// }\n// .icon-cancel {\n//   color: gray;\n// }\n// .icon-delete {\n//   color: red;\n// }\n\n@mixin img_fit() {\n  width: 100%;\n  height: 100%;\n  max-width: initial;\n  object-fit: cover;\n  object-position: center;\n}","*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    background-color: $black;\r\n}\r\n\r\nimg {\r\n    display: block;\r\n    max-width: 100%;\r\n}\r\n\r\nh1,\r\np,\r\nh2,\r\nh3 {\r\n    margin: 0;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.container {\r\n    max-width: 1190px;\r\n    width: 100%;\r\n    padding: 0 15px;\r\n    margin: 0 auto;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}","$white: #fff;\r\n$black: #000;",".header {\r\n    padding: 0 15px;\r\n\r\n    .container {\r\n        padding: 48px 0;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        justify-content: space-between;\r\n        color: $white;\r\n    }\r\n\r\n    &.active {\r\n\r\n        .nav-holder {\r\n            opacity: 1;\r\n            visibility: visible;\r\n        }\r\n\r\n        .nav-opener {\r\n            span {\r\n                opacity: 0;\r\n                visibility: hidden;\r\n            }\r\n\r\n            &::before {\r\n                transform: rotate(45deg);\r\n                top: 15px;\r\n            }\r\n\r\n            &::after {\r\n                transform: rotate(-45deg);\r\n                bottom: 14px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.nav-holder {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n\r\n    z-index: 0;\r\n    transition: all ease-in-out 0.3s;\r\n\r\n    @include media ('>=1024px') {\r\n        transform: translate(0, 0);\r\n        display: flex;\r\n        opacity: 1;\r\n        visibility: visible;\r\n        position: static;\r\n        height: auto;\r\n    }\r\n}\r\n\r\n.nav {\r\n    padding: 0 20px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-content: center;\r\n    justify-content: center;\r\n\r\n    @include media ('>1024px') {\r\n        justify-content: unset;\r\n    }\r\n\r\n}\r\n\r\n.nav-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @include media ('>1024px') {\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n}\r\n\r\n.nav-item {\r\n    padding: 0 20px;\r\n    text-align: center;\r\n    margin-bottom: 15px;\r\n\r\n    @include media ('>1024px') {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.nav-link {\r\n    color: $white;\r\n    font-weight: 400;\r\n    font-size: 28px;\r\n\r\n    @include media ('>1024px') {\r\n        font-size: 16px;\r\n    }\r\n}\r\n\r\n.list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n}\r\n\r\n.list-item {\r\n    padding-left: 0;\r\n\r\n    @include media ('>768px') {\r\n        padding-left: 12px;\r\n    }\r\n}\r\n\r\n.nav-opener {\r\n    background-color: $black;\r\n    border: none;\r\n    position: relative;\r\n    z-index: 2;\r\n    width: 40px;\r\n    height: 30px;\r\n\r\n    @include media ('>=1024px') {\r\n        display: none;\r\n    }\r\n\r\n    &::before,\r\n    &::after,\r\n    span {\r\n        display: block;\r\n        content: '';\r\n        position: absolute;\r\n        width: 100%;\r\n        left: 0;\r\n        height: 1px;\r\n        background-color: $white;\r\n        transition: all ease-in-out 0.3s;\r\n    }\r\n\r\n    &::before {\r\n        top: 0;\r\n    }\r\n\r\n    &::after {\r\n        bottom: 0;\r\n    }\r\n\r\n    span {\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n    }\r\n}"]}